program     → statement* EOF ;
statement   → varStmt | exprStmt | printStmt | funStmt | returnStmt ;
varStmt     → "let" IDENTIFIER "=" expression "\n" ;
exprStmt    → expression "\n" ;
printStmt   → "print" expression "\n" ;
funStmt     → "fn" function ;
returnStmt  → "return" expression? "\n" ;
block       → "{" statement* "}" ;


expression  → equality ;
equality    → comparison ( ( "!=" | "==" ) comparison )* ;
comparison  → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        → factor ( ( "+" | "-" ) factor )* ;
factor      → unary ( ( "/" | "*" ) unary )* ;
unary       → ( "!" | "-" ) unary | call ;
call        → primary ( "(" argument? ")" )? ;
primary     → NUMBER | IDENTIFIER | "(" expression ")" ;

function    → IDENTIFIER "(" parameters? ")" block ;
parameters  → IDENTIFIER  ( "," IDENTIFIER )* ;
arguments   → expression ( "," expression )* ;