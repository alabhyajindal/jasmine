program     →  statement* EOF 
statement   →  assign_stmt | block | expr_stmt | for_stmt | fun_decl | if_stmt | return_stmt | var_stmt 
assign_stmt →  IDENTIFIER "=" expression ";"
block       →  "{" statement* "}" 
expr_stmt   →  expression ";" 
for_stmt    →  "for" IDENTIFIER "in" expression ".." expression block
fun_decl    →  "fn" function 
if_stmt     →  "if" expression block ("else" "if" expression block)* ("else" block)?
return_stmt →  "return" expression? ";" 
var_stmt    →  "let" IDENTIFIER ":" type "=" expression ";" 


expression  →  equality 
equality    →  comparison ( ( "!=" | "==" ) comparison )* 
comparison  →  term ( ( ">" | ">=" | "<" | "<=" ) term )* 
term        →  factor ( ( "+" | "-" ) factor )* 
factor      →  unary ( ( "/" | "*" ) unary )* 
unary       →  ( "!" | "-" ) unary | call 
call        →  primary ( "(" arguments? ")" )? 
primary     →  NUMBER | STRING | IDENTIFIER | "(" expression ")" 

function    →  IDENTIFIER "(" parameters? ")" "->" type block 
parameters  →  parameter ( "," parameter )*
parameter   →  IDENTIFIER  ":" type
arguments   →  expression ( "," expression )* 
type        →  "int" | "str" | "nil"
